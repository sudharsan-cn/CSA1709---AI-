# Alpha-Beta Pruning for Tic Tac Toe

import math

def check_winner(b):
    for r in b:
        if r[0]==r[1]==r[2]!=" ": return r[0]
    for c in range(3):
        if b[0][c]==b[1][c]==b[2][c]!=" ": return b[0][c]
    if b[0][0]==b[1][1]==b[2][2]!=" ": return b[0][0]
    if b[0][2]==b[1][1]==b[2][0]!=" ": return b[0][2]
    return None

def full(b): return all(c!=" " for r in b for c in r)

def alpha_beta(b,depth,a,beta,maxi):
    w=check_winner(b)
    if w=="X": return -10+depth
    if w=="O": return 10-depth
    if full(b): return 0
    if maxi:
        val=-math.inf
        for i in range(3):
            for j in range(3):
                if b[i][j]==" ":
                    b[i][j]="O"
                    val=max(val,alpha_beta(b,depth+1,a,beta,False))
                    b[i][j]=" "
                    a=max(a,val)
                    if a>=beta: return val
        return val
    else:
        val=math.inf
        for i in range(3):
            for j in range(3):
                if b[i][j]==" ":
                    b[i][j]="X"
                    val=min(val,alpha_beta(b,depth+1,a,beta,True))
                    b[i][j]=" "
                    beta=min(beta,val)
                    if beta<=a: return val
        return val

def best_move(b):
    best=-math.inf; mv=None
    for i in range(3):
        for j in range(3):
            if b[i][j]==" ":
                b[i][j]="O"
                sc=alpha_beta(b,0,-math.inf,math.inf,False)
                b[i][j]=" "
                if sc>best: best,mv=sc,(i,j)
    return mv

# Sample run
board=[["X","O","X"],
       [" ","O"," "],
       [" "," ","X"]]

print("Best move for O:",best_move(board))
